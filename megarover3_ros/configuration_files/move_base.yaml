global_costmap:
  plugins:
    - {name: static_layer,    type: "costmap_2d::StaticLayer"}
    - {name: obstacle_layer,  type: "costmap_2d::ObstacleLayer"}
    - {name: inflation_layer, type: "costmap_2d::InflationLayer"}

  # 各TFフレーム名の設定
  global_frame: map
  robot_base_frame: base_link
  
  # ロボットの大きさに関するパラメータ
#footprint: [[0.1, -0.15], [0.1, 0.15], [-0.2, 0.15], [-0.2, -0.15]]
  
  # 更新頻度
  update_frequency: 2.0 #2.0
  publish_frequency: 2.0 #2.0

  # タイムスタンプの差の許容量
  transform_tolerance: 0.5
  
  #inflation_layerの設定
  inflation_layer:
    inflation_radius: 0.19 #0.22
# cost_scalling_factor: 3.0
  
  #obstacle_layerの設定
  obstacle_layer:
    enabled: true
    
    # これ以下の距離にある物体を障害物として扱う
    obstacle_range: 2.0 #3.5

    # これ以下の距離に物体が検出されない場合、ロボットとその距離までに障害物はないとして扱う
    # これ以上の距離を自由空間とする
    raytrace_range: 5 #8.0
  
  #static_layerの設定
  static_layer:
    enabled: true
    map_topic: "/map" 
    track_unknown_space: true #false：未知スペースをfreeにする
    subscribe_to_updates: true #mapトピックに加えupdateも受け取るか
  
local_costmap:
  plugins:
    - {name: obstacle_layer,  type: "costmap_2d::ObstacleLayer"}
    - {name: inflation_layer, type: "costmap_2d::InflationLayer"}

  # 各TFフレームの設定
  global_frame: odom
  robot_base_frame: base_link
  
  # LRFの設定
  observation_sources: laser_scan_sensor
  laser_scan_sensor: {sensor_frame: lrf_link, data_type: LaserScan, topic: scan, marking: true, clearing: true}
  
  # ロボットの大きさに関するパラメータ
#footprint: [[0.1, -0.15], [0.1, 0.15], [-0.2, 0.15], [-0.2, -0.15]]

  # 更新頻度の設定
  update_frequency: 3.0 #3.0
  publish_frequency: 3.0 #3.0

  # ローカルコストマップの計算範囲
  rolling_window: true #遠くのコストマップを初期化するか
  width: 3.0 #3.0
  height: 3.0

  # ローカルコストマップの解像度
  resolution: 0.05

  # タイムスタンプのずれの許容量
  transform_tolerance: 0.5

  #inflation_layerの設定
  inflation_layer:
    inflation_radius: 0.20

  #obstacle_layerの設定
  obstacle_layer:
    enabled: true
    
    # これ以下の距離にある物体を障害物として扱う
    obstacle_range: 3.5 #3.5

    # これ以下の距離に物体が検出されない場合、ロボットとその距離までに障害物はないとして扱う
    # これ以上の距離を自由空間とする
    raytrace_range: 5 #8.0

DWAPlannerROS:
  acc_lim_x: 1.0
  acc_lim_y: 0.0
  acc_lim_th: 0.4 #0.3
  max_vel_trans: 0.30 #0.30
  min_vel_trans: 0.00 #0.00
  max_vel_x: 0.5
  min_vel_x: 0.0 #0.0
  max_vel_y: 0.0
  min_vel_y: 0.0
  max_vel_theta: 0.5
  min_vel_theta: 0.0

  yaw_goal_tolerance: 0.3 #0.3
  xy_goal_tolerance: 0.12 #0.12
  latch_xy_goal_tolerance: true

  sim_time: 1.5 #2.0
  sim_granularity: 0.05 #0.05,0.025?
  vx_samples: 10 #10
  vtheta_samples: 20 #20
#cost =path_distance_bias * (軌道終端からパスへの距離(m))
#+ goal_distance_bias * (軌道終端からローカルゴールへの距離(m))
#+ occdist_scale * (軌道中の最大障害物コスト。単位は障害物コスト (0-254))
#+ path_distance_bias * (グローバルパスへの向きのコスト(m))
#+ goal_distance_bias * (ローカルゴールへの向きのコスト(m))
#+ twirling_scale * (スピンコスト(rad/s))
 
  path_distance_bias: 10.0 #72.0　パスにどれだけ近づこうとするか
  goal_distance_bias: 24.0 #24.0
  occdist_scale: 0.5 #0.5 どれだけ障害物を回避するか
  forward_point_distance: 0.1 #0.1

  oscillation_reset_dist: 0.05

  publish_traj_pc: true
  publish_cost_grid_pc: true
  global_frame_id: odom
  prune_plan: false

 
